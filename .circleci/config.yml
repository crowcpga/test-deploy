# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.0-cli-node

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      - run: sudo apt-get update
      - run: sudo apt-get install libzip-dev libwebp-dev libjpeg-dev libpng-dev libz-dev libxpm-dev libmcrypt-dev
      # Install additional PHP modules
      - run: sudo pecl channel-update pecl.php.net
      - run: sudo pecl install zip && sudo docker-php-ext-enable zip
      #- run: sudo pecl install xdebug && sudo docker-php-ext-enable xdebug
      - run: sudo docker-php-ext-install gd
      - run: sudo docker-php-ext-install bcmath && sudo docker-php-ext-enable bcmath
      - run: sudo docker-php-ext-install mcrypt && sudo docker-php-ext-enable mcrypt
      - run: sudo docker-php-ext-install pdo_mysql && sudo docker-php-ext-enable pdo_mysql
      - run: sudo apt-get install mysql-client
      # Install NGINX
      #- run: sudo apt-get install nginx
      #- run: sudo /etc/init.d/nginx start
      # Start PHP-FPM pool
      #- run: sudo php-fpm -D -y tests/_data/circleci.conf
      #- run: php composer.phar self-update

      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #     # "composer.lock" can be used if it is committed to the repo
      #     - v1-dependencies-{{ checksum "composer.json" }}
      #     # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-

      - run: composer install -n --prefer-dist

      #- save_cache:
      #    key: v1-dependencies-{{ checksum "composer.json" }}
      #    paths:
      #      - ./vendor
      #- restore_cache:
      #    keys:
      #      - node-v1-{{ checksum "package.json" }}
      #      - node-v1-
      #- run: yarn install
      #- save_cache:
      #    key: node-v1-{{ checksum "package.json" }}
      #    paths:
      #      - node_modules

      # prepare the database
      #- run: mkdir -p storage
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
